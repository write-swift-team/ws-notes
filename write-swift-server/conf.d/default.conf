# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
# 

upstream landing-page {
    server 172.17.0.1:2000;
    server 172.17.0.1:2010;
    server 172.17.0.1:2020;
}
server {
    listen 80;
    server_name localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root /usr/local/openresty/nginx/html;
        ssi on;
        index index.html index.htm;
    }
    location /templates {
        root /usr/local/openresty/nginx;
    }
    location /api/name {
        proxy_pass http://landing-page/api/v1/dynamic/name;
    }
    location /api/review {
        proxy_pass http://landing-page/api/v1/dynamic/review;
    }
    location /api/avatar {
        proxy_pass http://landing-page/api/v1/dynamic/avatar;
    }
    location /name {
    lua_code_cache off;
        content_by_lua_block {
            response = ngx.location.capture (
            '/api/name', {
                always_forward_body = true,
                copy_all_vars = true
            }
            )

            if response.status > 500 then
            ngx.exit(response.status)
            end

            local cjson = require("cjson")
            orders1 = cjson.decode(response.body)

            local template = require "resty.template";
            local template_string = ngx.location.capture("/templates/lua/name.html")
            template.render(template_string.body, {
                items1 = orders1,
                })
            }

    }
    location /review {
    lua_code_cache off;
        content_by_lua_block {
            response = ngx.location.capture (
            '/api/review', {
                always_forward_body = true,
                copy_all_vars = true
            }
            )

            if response.status > 500 then
            ngx.exit(response.status)
            end

            local cjson = require("cjson")
            orders2 = cjson.decode(response.body)

            local template = require "resty.template";
            local template_string = ngx.location.capture("/templates/lua/review.html")
            template.render(template_string.body, {
                items2 = orders2
                })
    }
    }
    location /avatar {
    lua_code_cache off;
        content_by_lua_block {
            response = ngx.location.capture (
            '/api/avatar', {
                always_forward_body = true,
                copy_all_vars = true
            }
            )

            if response.status > 500 then
            ngx.exit(response.status)
            end

            local cjson = require("cjson")
            orders3 = cjson.decode(response.body)

            local template = require "resty.template";
            local template_string = ngx.location.capture("/templates/lua/avatar.html")
            template.render(template_string.body, {
                items3 = orders3,
                })
            }

    }
    #error_page  404              /404.html;
    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/local/openresty/nginx/html;
    }



    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}
    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}